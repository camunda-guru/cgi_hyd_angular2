class: declare type ClassDecorator = <TFunction extends Function>(target: TFunction)
=> TFunction | void;
property: declare type PropertyDecorator = (target: Object, propertyKey: string |
symbol) => void;
method: declare type MethodDecorator = <T>(target: Object, propertyKey: string |
symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
parameter: declare type ParameterDecorator = (target: Object, propertyKey: string |
symbol, parameterIndex: number) => void;